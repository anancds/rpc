/**
 * Copyright 2020 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package mindspore.ps.core;
option optimize_for = LITE_RUNTIME;

enum NodeCommand {
  TERMINATE = 0;
  REGISTER = 1;
  HEARTBEAT = 2;
  SEND_DATA = 3;
  FETCH_SERVER = 4;
  FINISH = 5;
  COLLECTIVE_SEND_DATA = 6;
}

enum NodeRole {
  SERVER = 0;
  WORKER = 1;
  SCHEDULER = 2;
}

message MessageMeta {
  // the command of this message,for example: register,heartbeat,data
  NodeCommand cmd = 1;
  // the request id of this message
  uint64 request_id = 2;
  // the role of the current node: worker,server,scheduler
  NodeRole role = 3;
  // the current Node rank id,the worker node range is:[0,numOfWorker-1], the server node range is:[0, numOfServer-1]
  int32 rank_id = 4;
  // User-defined commands
  int32 user_cmd = 5;
}

message RegisterMessage {
  // ip
  string ip = 1;
  // the port of this node
  int32 port = 2;
  // the current Node unique id:0,1,2...
  string node_id = 3;
  // the role of the node: worker,server,scheduler
  NodeRole role = 4;
}

message RegisterRespMessage {
  string node_id = 1;
  int32 rank_id = 2;
}

message HeartbeatMessage {
  // the current Node unique id:0,1,2...
  string node_id = 1;
  bool is_node_finish = 2;
}

enum NodeAttribute {
  IS_CLUSTER_READY = 0;
  IS_CLUSTER_FINISH = 1;
  IS_CLUSTER_TIMEOUT = 2;
  IS_NODE_TIMEOUT = 3;
}

// todo gaicheng map
message HeartbeatRespMessage {
  map<int32, bool> node_attribute = 1;
}

message FetchServersMessage {
  string node_id = 1;
}

message FetchServersRespMessage {
  repeated ServersMeta servers_meta = 1;
}

message ServersMeta {
  int32 rank_id = 1;
  string ip = 2;
  int32 port = 3;

}

message FinishMessage {
  // the current Node unique id:0,1,2...
  string node_id = 1;
}

message CommMessage {
  MessageMeta pb_meta = 1;
  bytes data = 2;
}
